version: "3.8"

services:
  db:
    image: postgres:15-alpine
    container_name: feedback_db
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    ports: # Optional: expose for local db client access
      - "54321:5432" # Host port : Container port
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  backend:
    build: ./backend
    container_name: feedback_backend
    volumes:
      - ./backend:/app # Mount current backend directory to /app in container for live reload
      - static_volume:/app/staticfiles # Volume for static files collected by Django
    ports: # Only needed if accessing directly, Nginx will proxy
      - "8001:8000" # Host port : Container port
    env_file:
      - .env # Load environment variables from .env file
    depends_on:
      db:
        condition: service_healthy # Wait for db to be healthy
    command: >
      sh -c "python manage.py wait_for_db &&
             /app/entrypoint.sh gunicorn feedback_board.wsgi:application --bind 0.0.0.0:8000 --workers 3"

  frontend:
    build: ./frontend
    container_name: feedback_frontend
    volumes:
      - ./frontend:/app # Mount current frontend directory for live reload
      - /app/node_modules # Anonymous volume to prevent host node_modules overwriting container's
      - /app/.next # Anonymous volume for Next.js build cache
    ports: # Only needed if accessing directly, Nginx will proxy
      - "3001:3000" # Host port : Container port
    environment:
      # Ensure Next.js dev server reloads properly with Docker
      - WATCHPACK_POLLING=true
      # Point API requests to Nginx (which will be accessible at http://nginx or http://localhost on the host)
      - NEXT_PUBLIC_API_URL=http://localhost/api # Nginx listens on port 80 by default
    depends_on:
      - backend

  nginx:
    image: nginx:alpine
    container_name: feedback_nginx
    ports:
      - "80:80" # Main entry point for the application
    volumes:
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf:ro # Read-only Nginx config
      - static_volume:/app/staticfiles:ro # Mount static files (read-only) collected by backend
    depends_on:
      - backend
      - frontend

volumes:
  postgres_data:
  static_volume: # For Django static files shared with Nginx
